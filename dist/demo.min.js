!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/dist/",e(e.s=7)}([function(t,n,e){"use strict";e.r(n),e.d(n,"htmlEditButton",(function(){return l}));e(1);function r(t){return document.createElement(t)}function o(t,n,e){return t.setAttribute(n,e)}var i=!1,a={prefixString:function(){return"</> quill-html-edit-button: "},get log(){return i?console.log.bind(console,this.prefixString()):function(){}}},l=function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),i=e&&e.debug,a.log("logging enabled");var l=n.container.parentElement.querySelectorAll(".ql-toolbar");(l=[].slice.call(l)).forEach((function(t){var e=r("span");o(e,"class","ql-formats");var i=r("button");i.innerHTML="&lt;&gt;",i.title="Show HTML source",i.onclick=function(t){t.preventDefault(),function(t){var n=t.container.querySelector(".ql-editor").innerHTML,e=r("div"),i=r("div");o(i,"class","ql-html-overlayContainer"),o(e,"class","ql-html-popupContainer");var l=r("i");o(l,"class","ql-html-popupTitle"),l.innerText='Edit HTML here, when you click "OK" the quill editor\'s contents will be replaced';var s=r("div");s.appendChild(l),o(s,"class","ql-html-textContainer");var u=r("textarea");o(u,"class","ql-html-textArea"),u.value=function(t){for(var n=" ".repeat(2),e=0,r=null,o=null,i="",l=0;l<=t.length;l++){r=t.substr(l,1),o=t.substr(l+1,1);var s="<br>"===t.substr(l,4),u="<"===r&&"/"===o&&!s;s&&(i+="\n",e--,l+=4),"<"===r&&"/"!==o&&!s?(i+="\n"+n.repeat(e),e++):u?(--e<0&&(e=0),i+="\n"+n.repeat(e)):(" "===r&&" "===o||"\n"===r&&""===t.substr(l,t.substr(l).indexOf("<")).trim())&&(r=""),i+=r}return a.log("formatHTML",{before:t,after:i}),i}(n);var c=r("button");c.innerHTML="Cancel",o(c,"class","ql-html-buttonCancel");var f=r("button");f.innerHTML="Ok";var p=r("div");o(p,"class","ql-html-buttonGroup"),p.appendChild(c),p.appendChild(f),s.appendChild(u),s.appendChild(p),e.appendChild(s),i.appendChild(e),document.body.appendChild(i),c.onclick=function(){document.body.removeChild(i)},i.onclick=c.onclick,e.onclick=function(t){t.preventDefault(),t.stopPropagation()},f.onclick=function(){var n=u.value.split(/\r?\n/g).map((function(t){return t.trim()})).join("");t.container.querySelector(".ql-editor").innerHTML=n,document.body.removeChild(i)}}(n)},e.appendChild(i),t.appendChild(e)}))};window.htmlEditButton=l,n.default=l},function(t,n,e){var r=e(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0};e(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(3)(!1)).push([t.i,".ql-html-overlayContainer {\n  background: #0000007d;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 9999;\n}\n\n.ql-html-popupContainer {\n  background: #ddd;\n  position: absolute;\n  top: 5%;\n  left: 5%;\n  right: 5%;\n  bottom: 5%;\n  border-radius: 10px;\n}\n\n.ql-html-textContainer {\n  position: relative;\n  width: calc(100% - 40px);\n  height: calc(100% - 40px);\n  padding: 20px;\n}\n\n.ql-html-textArea {\n  position: absolute;\n  left: 15px;\n  width: calc(100% - 45px);\n  height: calc(100% - 116px);\n}\n\n.ql-html-buttonCancel {\n  margin-right: 20px;\n}\n\n.ql-html-popupTitle {\n  margin: 0;\n  display: block;\n}\n\n.ql-html-buttonGroup {\n  position: absolute;\n  bottom: 20px;\n  transform: scale(1.5);\n  left: calc(50% - 60px);\n}\n",""])},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e})).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(t){var n={};return function(e){if(void 0===n[e]){var r=t.call(this,e);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[e]=r}return n[e]}}((function(t){return document.querySelector(t)})),s=null,u=0,c=[],f=e(5);function p(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],n))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(g(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:l}}}}function d(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):e.push(r[a]={id:a,parts:[l]})}return e}function h(t,n){var e=l(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),c.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(t.insertInto+" "+t.insertAt.before);e.insertBefore(n,o)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=c.indexOf(t);n>=0&&c.splice(n,1)}function v(t){var n=document.createElement("style");return t.attrs.type="text/css",m(n,t.attrs),h(t,n),n}function m(t,n){Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])}))}function g(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i=n.transform(t.css)))return function(){};t.css=i}if(n.singleton){var a=u++;e=s||(s=v(n)),r=w.bind(null,e,a,!1),o=w.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",m(n,t.attrs),h(t,n),n}(n),r=q.bind(null,e,n),o=function(){b(e),e.href&&URL.revokeObjectURL(e.href)}):(e=v(n),r=C.bind(null,e),o=function(){b(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return p(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var a=e[o];(l=i[a.id]).refs--,r.push(l)}t&&p(d(t,n),n);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete i[l.id]}}}};var y,x=(y=[],function(t,n){return y[t]=n,y.filter(Boolean).join("\n")});function w(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function C(t,n){var e=n.css,r=n.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}function q(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=t.href;t.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,(function(t,n){return n})).replace(/^'(.*)'$/,(function(t,n){return n}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(t,n){t.exports=Quill},function(t,n,e){"use strict";e.r(n);var r=e(6),o=e.n(r),i=e(0);o.a.register("modules/htmlEditButton",i.htmlEditButton);console.log("Demo loaded...");new o.a("#editor",{theme:"snow",modules:{toolbar:{container:[[{header:[1,2,3,!1]}],["bold","italic"],["clean"],["image"]]},htmlEditButton:{debug:!0}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3F1aWxsLmh0bWxFZGl0QnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuY3NzPzAyYWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIlF1aWxsXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIkY3JlYXRlIiwiZWxOYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiJHNldEF0dHIiLCJlbCIsInNldEF0dHJpYnV0ZSIsImRlYnVnIiwiTG9nZ2VyIiwicHJlZml4U3RyaW5nIiwiY29uc29sZSIsImxvZyIsInRoaXMiLCJodG1sRWRpdEJ1dHRvbiIsInF1aWxsIiwib3B0aW9ucyIsInRvb2xiYXJzIiwiY29udGFpbmVyIiwicGFyZW50RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzbGljZSIsImZvckVhY2giLCJ0b29sYmFyRWwiLCJidXR0b25Db250YWluZXIiLCJidXR0b24iLCJpbm5lckhUTUwiLCJ0aXRsZSIsIm9uY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJodG1sRnJvbUVkaXRvciIsInF1ZXJ5U2VsZWN0b3IiLCJwb3B1cENvbnRhaW5lciIsIm92ZXJsYXlDb250YWluZXIiLCJwb3B1cFRpdGxlIiwiaW5uZXJUZXh0IiwidGV4dENvbnRhaW5lciIsImFwcGVuZENoaWxkIiwidGV4dEFyZWEiLCJjb2RlIiwid2hpdGVzcGFjZSIsInJlcGVhdCIsImN1cnJlbnRJbmRlbnQiLCJjaGFyIiwibmV4dENoYXIiLCJyZXN1bHQiLCJwb3MiLCJsZW5ndGgiLCJzdWJzdHIiLCJpc0JyVGFnIiwiaXNDbG9zaW5nVGFnIiwiaW5kZXhPZiIsInRyaW0iLCJiZWZvcmUiLCJhZnRlciIsImZvcm1hdEhUTUwiLCJidXR0b25DYW5jZWwiLCJidXR0b25PayIsImJ1dHRvbkdyb3VwIiwiYm9keSIsInJlbW92ZUNoaWxkIiwic3RvcFByb3BhZ2F0aW9uIiwibm9OZXdsaW5lcyIsInNwbGl0IiwibWFwIiwiam9pbiIsImxhdW5jaFBvcHVwRWRpdG9yIiwid2luZG93IiwiY29udGVudCIsInRyYW5zZm9ybSIsImxvY2FscyIsInB1c2giLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJpdGVtIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaWQiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50Iiwic2VsZWN0b3IiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInRhcmdldCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsImlkeCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwia2V5cyIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJocmVmIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJhdXRvRml4VXJscyIsInVuZGVmaW5lZCIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwidGVzdCIsIlF1aWxsIiwicmVnaXN0ZXIiLCJ0aGVtZSIsInRvb2xiYXIiLCJoZWFkZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUs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Q1QsQ0FBQyxTQUNELENBQUMsV0FXQ3RMLGVBQWdCLENBQUVOLE9BQU8iLCJmaWxlIjoiZGVtby5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJpbXBvcnQgJy4vc3R5bGVzLmNzcyc7XHJcblxyXG5mdW5jdGlvbiAkY3JlYXRlKGVsTmFtZSkge1xyXG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsTmFtZSk7XHJcbn1cclxuZnVuY3Rpb24gJHNldEF0dHIoZWwsIGtleSwgdmFsdWUpIHtcclxuICByZXR1cm4gZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xyXG59XHJcblxyXG5sZXQgZGVidWcgPSBmYWxzZTtcclxuY29uc3QgTG9nZ2VyID0ge1xyXG4gIHByZWZpeFN0cmluZygpIHtcclxuICAgIHJldHVybiBgPC8+IHF1aWxsLWh0bWwtZWRpdC1idXR0b246IGA7XHJcbiAgfSxcclxuICBnZXQgbG9nKCkge1xyXG4gICAgaWYgKCFkZWJ1Zykge1xyXG4gICAgICByZXR1cm4gKC4uLmFueSkgPT4ge307XHJcbiAgICB9XHJcbiAgICBjb25zdCBib3VuZExvZ0ZuID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlLCB0aGlzLnByZWZpeFN0cmluZygpKTtcclxuICAgIHJldHVybiBib3VuZExvZ0ZuO1xyXG4gIH1cclxufTtcclxuXHJcbmNsYXNzIGh0bWxFZGl0QnV0dG9uIHtcclxuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xyXG4gICAgZGVidWcgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVidWc7XHJcbiAgICBMb2dnZXIubG9nKFwibG9nZ2luZyBlbmFibGVkXCIpO1xyXG4gICAgLy8gQWRkIGJ1dHRvbiB0byBhbGwgcXVpbGwgdG9vbGJhciBpbnN0YW5jZXNcclxuICAgIGxldCB0b29sYmFycyA9IHF1aWxsLmNvbnRhaW5lci5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLnFsLXRvb2xiYXJcIlxyXG4gICAgKTtcclxuICAgIHRvb2xiYXJzID0gW10uc2xpY2UuY2FsbCh0b29sYmFycyk7XHJcbiAgICB0b29sYmFycy5mb3JFYWNoKHRvb2xiYXJFbCA9PiB7XHJcbiAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9ICRjcmVhdGUoXCJzcGFuXCIpO1xyXG4gICAgICAkc2V0QXR0cihidXR0b25Db250YWluZXIsIFwiY2xhc3NcIiwgXCJxbC1mb3JtYXRzXCIpO1xyXG4gICAgICBjb25zdCBidXR0b24gPSAkY3JlYXRlKFwiYnV0dG9uXCIpO1xyXG4gICAgICBidXR0b24uaW5uZXJIVE1MID0gXCImbHQ7Jmd0O1wiO1xyXG4gICAgICBidXR0b24udGl0bGUgPSBcIlNob3cgSFRNTCBzb3VyY2VcIjtcclxuICAgICAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxhdW5jaFBvcHVwRWRpdG9yKHF1aWxsKTtcclxuICAgICAgfTtcclxuICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgIHRvb2xiYXJFbC5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBsYXVuY2hQb3B1cEVkaXRvcihxdWlsbCkge1xyXG4gIGNvbnN0IGh0bWxGcm9tRWRpdG9yID0gcXVpbGwuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIucWwtZWRpdG9yXCIpLmlubmVySFRNTDtcclxuICBjb25zdCBwb3B1cENvbnRhaW5lciA9ICRjcmVhdGUoXCJkaXZcIik7XHJcbiAgY29uc3Qgb3ZlcmxheUNvbnRhaW5lciA9ICRjcmVhdGUoXCJkaXZcIik7XHJcbiAgJHNldEF0dHIob3ZlcmxheUNvbnRhaW5lciwgXCJjbGFzc1wiLCBcInFsLWh0bWwtb3ZlcmxheUNvbnRhaW5lclwiKTtcclxuICAkc2V0QXR0cihwb3B1cENvbnRhaW5lciwgXCJjbGFzc1wiLCBcInFsLWh0bWwtcG9wdXBDb250YWluZXJcIik7XHJcbiAgY29uc3QgcG9wdXBUaXRsZSA9ICRjcmVhdGUoXCJpXCIpO1xyXG4gICRzZXRBdHRyKHBvcHVwVGl0bGUsIFwiY2xhc3NcIiwgXCJxbC1odG1sLXBvcHVwVGl0bGVcIik7XHJcbiAgcG9wdXBUaXRsZS5pbm5lclRleHQgPVxyXG4gICAgJ0VkaXQgSFRNTCBoZXJlLCB3aGVuIHlvdSBjbGljayBcIk9LXCIgJyArXHJcbiAgICBcInRoZSBxdWlsbCBlZGl0b3IncyBjb250ZW50cyB3aWxsIGJlIHJlcGxhY2VkXCI7XHJcbiAgY29uc3QgdGV4dENvbnRhaW5lciA9ICRjcmVhdGUoXCJkaXZcIik7XHJcbiAgdGV4dENvbnRhaW5lci5hcHBlbmRDaGlsZChwb3B1cFRpdGxlKTtcclxuICAkc2V0QXR0cih0ZXh0Q29udGFpbmVyLCBcImNsYXNzXCIsIFwicWwtaHRtbC10ZXh0Q29udGFpbmVyXCIpO1xyXG4gIGNvbnN0IHRleHRBcmVhID0gJGNyZWF0ZShcInRleHRhcmVhXCIpO1xyXG4gICRzZXRBdHRyKHRleHRBcmVhLCBcImNsYXNzXCIsIFwicWwtaHRtbC10ZXh0QXJlYVwiKTtcclxuICB0ZXh0QXJlYS52YWx1ZSA9IGZvcm1hdEhUTUwoaHRtbEZyb21FZGl0b3IpO1xyXG4gIGNvbnN0IGJ1dHRvbkNhbmNlbCA9ICRjcmVhdGUoXCJidXR0b25cIik7XHJcbiAgYnV0dG9uQ2FuY2VsLmlubmVySFRNTCA9IFwiQ2FuY2VsXCI7XHJcbiAgJHNldEF0dHIoYnV0dG9uQ2FuY2VsLCBcImNsYXNzXCIsIFwicWwtaHRtbC1idXR0b25DYW5jZWxcIik7XHJcbiAgY29uc3QgYnV0dG9uT2sgPSAkY3JlYXRlKFwiYnV0dG9uXCIpO1xyXG4gIGJ1dHRvbk9rLmlubmVySFRNTCA9IFwiT2tcIjtcclxuICBjb25zdCBidXR0b25Hcm91cCA9ICRjcmVhdGUoXCJkaXZcIik7XHJcbiAgJHNldEF0dHIoYnV0dG9uR3JvdXAsIFwiY2xhc3NcIiwgXCJxbC1odG1sLWJ1dHRvbkdyb3VwXCIpO1xyXG5cclxuICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidXR0b25DYW5jZWwpO1xyXG4gIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ1dHRvbk9rKTtcclxuICB0ZXh0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRBcmVhKTtcclxuICB0ZXh0Q29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKTtcclxuICBwb3B1cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0Q29udGFpbmVyKTtcclxuICBvdmVybGF5Q29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwQ29udGFpbmVyKTtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXlDb250YWluZXIpO1xyXG5cclxuICBidXR0b25DYW5jZWwub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5Q29udGFpbmVyKTtcclxuICB9O1xyXG4gIG92ZXJsYXlDb250YWluZXIub25jbGljayA9IGJ1dHRvbkNhbmNlbC5vbmNsaWNrO1xyXG4gIHBvcHVwQ29udGFpbmVyLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gIH07XHJcbiAgYnV0dG9uT2sub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3Qgb3V0cHV0ID0gdGV4dEFyZWEudmFsdWUuc3BsaXQoL1xccj9cXG4vZykubWFwKGVsID0+IGVsLnRyaW0oKSk7XHJcbiAgICBjb25zdCBub05ld2xpbmVzID0gb3V0cHV0LmpvaW4oXCJcIik7XHJcbiAgICBxdWlsbC5jb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5xbC1lZGl0b3JcIikuaW5uZXJIVE1MID0gbm9OZXdsaW5lcztcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheUNvbnRhaW5lcik7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gQWRhcHRlZCBGUk9NIGpzZmlkZGxlIGhlcmU6IGh0dHBzOi8vanNmaWRkbGUubmV0L2J1a3N5L3J4dWNnMWdkL1xyXG5mdW5jdGlvbiBmb3JtYXRIVE1MKGNvZGUpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuICBsZXQgc3RyaXBXaGl0ZVNwYWNlcyA9IHRydWU7XHJcbiAgbGV0IHN0cmlwRW1wdHlMaW5lcyA9IHRydWU7XHJcbiAgY29uc3Qgd2hpdGVzcGFjZSA9IFwiIFwiLnJlcGVhdCgyKTsgLy8gRGVmYXVsdCBpbmRlbnRpbmcgNCB3aGl0ZXNwYWNlc1xyXG4gIGxldCBjdXJyZW50SW5kZW50ID0gMDtcclxuICBjb25zdCBuZXdsaW5lQ2hhciA9IFwiXFxuXCI7XHJcbiAgbGV0IGNoYXIgPSBudWxsO1xyXG4gIGxldCBuZXh0Q2hhciA9IG51bGw7XHJcblxyXG4gIGxldCByZXN1bHQgPSBcIlwiO1xyXG4gIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8PSBjb2RlLmxlbmd0aDsgcG9zKyspIHtcclxuICAgIGNoYXIgPSBjb2RlLnN1YnN0cihwb3MsIDEpO1xyXG4gICAgbmV4dENoYXIgPSBjb2RlLnN1YnN0cihwb3MgKyAxLCAxKTtcclxuXHJcbiAgICBjb25zdCBpc0JyVGFnID0gY29kZS5zdWJzdHIocG9zLCA0KSA9PT0gXCI8YnI+XCI7XHJcbiAgICBjb25zdCBpc09wZW5pbmdUYWcgPSBjaGFyID09PSBcIjxcIiAmJiBuZXh0Q2hhciAhPT0gXCIvXCIgJiYgIWlzQnJUYWc7XHJcbiAgICBjb25zdCBpc0Nsb3NpbmdUYWcgPSBjaGFyID09PSBcIjxcIiAmJiBuZXh0Q2hhciA9PT0gXCIvXCIgJiYgIWlzQnJUYWc7XHJcbiAgICBpZiAoaXNCclRhZykge1xyXG4gICAgICAvLyBJZiBvcGVuaW5nIHRhZywgYWRkIG5ld2xpbmUgY2hhcmFjdGVyIGFuZCBpbmRlbnRpb25cclxuICAgICAgcmVzdWx0ICs9IG5ld2xpbmVDaGFyO1xyXG4gICAgICBjdXJyZW50SW5kZW50LS07XHJcbiAgICAgIHBvcyArPSA0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT3BlbmluZ1RhZykge1xyXG4gICAgICAvLyBJZiBvcGVuaW5nIHRhZywgYWRkIG5ld2xpbmUgY2hhcmFjdGVyIGFuZCBpbmRlbnRpb25cclxuICAgICAgcmVzdWx0ICs9IG5ld2xpbmVDaGFyICsgd2hpdGVzcGFjZS5yZXBlYXQoY3VycmVudEluZGVudCk7XHJcbiAgICAgIGN1cnJlbnRJbmRlbnQrKztcclxuICAgIH1cclxuICAgIC8vIGlmIENsb3NpbmcgdGFnLCBhZGQgbmV3bGluZSBhbmQgaW5kZW50aW9uXHJcbiAgICBlbHNlIGlmIChpc0Nsb3NpbmdUYWcpIHtcclxuICAgICAgLy8gSWYgdGhlcmUncmUgbW9yZSBjbG9zaW5nIHRhZ3MgdGhhbiBvcGVuaW5nXHJcbiAgICAgIGlmICgtLWN1cnJlbnRJbmRlbnQgPCAwKSBjdXJyZW50SW5kZW50ID0gMDtcclxuICAgICAgcmVzdWx0ICs9IG5ld2xpbmVDaGFyICsgd2hpdGVzcGFjZS5yZXBlYXQoY3VycmVudEluZGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIG11bHRpcGxlIHdoaXRlc3BhY2VzXHJcbiAgICBlbHNlIGlmIChzdHJpcFdoaXRlU3BhY2VzID09PSB0cnVlICYmIGNoYXIgPT09IFwiIFwiICYmIG5leHRDaGFyID09PSBcIiBcIilcclxuICAgICAgY2hhciA9IFwiXCI7XHJcbiAgICAvLyByZW1vdmUgZW1wdHkgbGluZXNcclxuICAgIGVsc2UgaWYgKHN0cmlwRW1wdHlMaW5lcyA9PT0gdHJ1ZSAmJiBjaGFyID09PSBuZXdsaW5lQ2hhcikge1xyXG4gICAgICAvL2RlYnVnZ2VyO1xyXG4gICAgICBpZiAoY29kZS5zdWJzdHIocG9zLCBjb2RlLnN1YnN0cihwb3MpLmluZGV4T2YoXCI8XCIpKS50cmltKCkgPT09IFwiXCIpXHJcbiAgICAgICAgY2hhciA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0ICs9IGNoYXI7XHJcbiAgfVxyXG4gIExvZ2dlci5sb2coXCJmb3JtYXRIVE1MXCIsIHtcclxuICAgIGJlZm9yZTogY29kZSxcclxuICAgIGFmdGVyOiByZXN1bHRcclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG53aW5kb3cuaHRtbEVkaXRCdXR0b24gPSBodG1sRWRpdEJ1dHRvbjtcclxuZXhwb3J0IGRlZmF1bHQgaHRtbEVkaXRCdXR0b247XHJcbmV4cG9ydCB7IGh0bWxFZGl0QnV0dG9uIH07XHJcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5xbC1odG1sLW92ZXJsYXlDb250YWluZXIge1xcbiAgYmFja2dyb3VuZDogIzAwMDAwMDdkO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgei1pbmRleDogOTk5OTtcXG59XFxuXFxuLnFsLWh0bWwtcG9wdXBDb250YWluZXIge1xcbiAgYmFja2dyb3VuZDogI2RkZDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNSU7XFxuICBsZWZ0OiA1JTtcXG4gIHJpZ2h0OiA1JTtcXG4gIGJvdHRvbTogNSU7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4ucWwtaHRtbC10ZXh0Q29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0MHB4KTtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNDBweCk7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG5cXG4ucWwtaHRtbC10ZXh0QXJlYSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAxNXB4O1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDQ1cHgpO1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxMTZweCk7XFxufVxcblxcbi5xbC1odG1sLWJ1dHRvbkNhbmNlbCB7XFxuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxufVxcblxcbi5xbC1odG1sLXBvcHVwVGl0bGUge1xcbiAgbWFyZ2luOiAwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5xbC1odG1sLWJ1dHRvbkdyb3VwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMjBweDtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS41KTtcXG4gIGxlZnQ6IGNhbGMoNTAlIC0gNjBweCk7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbihzZWxlY3Rvcikge1xuXHRcdGlmICh0eXBlb2YgbWVtb1tzZWxlY3Rvcl0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGZuLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmIChzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bc2VsZWN0b3JdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3NlbGVjdG9yXVxuXHR9O1xufSkoZnVuY3Rpb24gKHRhcmdldCkge1xuXHRyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpXG59KTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcblx0aWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBRdWlsbDsiLCJpbXBvcnQgUXVpbGwgZnJvbSBcInF1aWxsXCI7XHJcbmltcG9ydCB7IGh0bWxFZGl0QnV0dG9uIH0gZnJvbSBcIi4vcXVpbGwuaHRtbEVkaXRCdXR0b25cIjtcclxuXHJcblF1aWxsLnJlZ2lzdGVyKFwibW9kdWxlcy9odG1sRWRpdEJ1dHRvblwiLCBodG1sRWRpdEJ1dHRvbik7XHJcblxyXG5jb25zdCBmdWxsVG9vbGJhck9wdGlvbnMgPSBbXHJcbiAgW3sgaGVhZGVyOiBbMSwgMiwgMywgZmFsc2VdIH1dLFxyXG4gIFtcImJvbGRcIiwgXCJpdGFsaWNcIl0sXHJcbiAgW1wiY2xlYW5cIl0sXHJcbiAgW1wiaW1hZ2VcIl1cclxuXTtcclxuXHJcbmNvbnNvbGUubG9nKFwiRGVtbyBsb2FkZWQuLi5cIik7XHJcblxyXG52YXIgcXVpbGwgPSBuZXcgUXVpbGwoXCIjZWRpdG9yXCIsIHtcclxuICB0aGVtZTogXCJzbm93XCIsXHJcbiAgbW9kdWxlczoge1xyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICBjb250YWluZXI6IGZ1bGxUb29sYmFyT3B0aW9uc1xyXG4gICAgfSxcclxuICAgIGh0bWxFZGl0QnV0dG9uOiB7IGRlYnVnOiB0cnVlIH1cclxuICB9XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9